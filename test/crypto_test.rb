# -*- encoding : ascii-8bit -*-
require 'test_helper'

class CryptoTest < Minitest::Test
  include DEVp2p

  def test_privtopub
    assert_equal "\e\x84\xC5V{\x12d@\x99]>\xD5\xAA\xBA\x05e\xD7\x1E\x184`H\x19\xFF\x9C\x17\xF5\xE9\xD5\xDD\a\x8Fp\xBE\xAF\x8FX\x8BT\x15\a\xFE\xD6\xA6B\xC5\xABB\xDF\xDF\x81 \xA7\xF69\xDEQ\"\xD4zi\xA8\xE8\xD1", Crypto.privtopub("\x01"*32)
  end

  def test_keccak256
    assert_equal 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470', Utils.encode_hex(Crypto.keccak256(''))
  end

  def test_hmac_sha256
    assert_equal "rQ\xB8\xD0\xA5@\x88Q$\xD9\x7F'\xC5\xFC[\x84}\x87E6!\xF4#\xE7+\x9D\xE2\xA2\xE6\xE0\x00^", Crypto.hmac_sha256("\x01"*32, 'ether')
  end

  def test_ecdsa_sign
    assert_equal "R\x90\xB9\xF6r/M\x1A\xAB\x99\xF0\"\xF8\xD6\xF1\xFA\xE6\x83\x00C9\x153\xA8L;\x127\xD3\xBD\x8DWP\xDD%\x06\xCD\x04o\xEBD_\xDD8\xAF\xEF\x9D\x7F\xB6\xEE\x18/R\xDCE*\t1\xCEHcz\xCC\xC6\x00", Crypto.ecdsa_sign("1"*32, "\x01"*32)
  end
end
